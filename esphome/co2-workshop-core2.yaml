substitutions:
  touch_delay: 10ms
  icon_size: "72"
  dot_size: "4"

esphome:
  name: co2-workshop-core2
  friendly_name: CO2 Workshop
  comment: M5Stack Core2 and custom PCB with SCD-41 CO2 sensor and 10x WS2812 RGB LED strips
  platformio_options:
    board_build.f_flash: 80000000L # set FLASH frequency to 80MHz
    board_build.partitions: default_16MB.csv
  on_boot: 
    priority: 600
    then:
      # This is needed otherwise setting to 100% later doesn't work, no idea why
      - lambda: "axp192_axp192component->set_brightness(0.5);"
      - light.turn_on:
          id: rgb
          effect: 'Rainbow'
          brightness: 100%
      -  delay: 7s
      - light.turn_on:
          id: rgb
          effect: 'None'
          brightness: !lambda 'return id(rgb_brightness).state / 100.0;'
      - light.turn_off:
          id: rgb
      - display.page.show: page4 # show instructions page to begin with

external_components:
  - source: github://Pionizer/pionizer-axp192
    components: [axp192]
    refresh: 1days

esp32:
  board: m5stack-core-esp32
  framework:
    type: arduino
  variant: ESP32
  flash_size: 16MB

# Enable logging
logger:
  level: ERROR

api:
  encryption:
    key: !secret api_key

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # manual_ip:
  #   static_ip: 192.168.20.222
  #   gateway: 192.168.20.1
  #   subnet: 255.255.255.0

globals:
  - id: touch_x
    type: int
    restore_value: no
    initial_value: "0"
  - id: touch_y
    type: int
    restore_value: no
    initial_value: "0"
  - id: general_timer
    type: int
    initial_value: '0'
  - id: co2_txt_color
    type: Color
    initial_value: id(my_green)
  - id: temp_txt_colour
    type: Color
    initial_value: id(my_green)
  - id: co2_updated
    type: bool
    initial_value: 'false'
  - id: co2_calibrate
    type: bool
    initial_value: 'false'
  - id: co2_cal_val
    type: int
    initial_value: '425' # outside average April 2022 is 419
  - id: cycle_pages
    type: bool
    initial_value: 'false'


color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_orange
    # 255, 128, 0
    red: 100%
    green: 50%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: mid_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: dark_gray
    red: 20%
    green: 20%
    blue: 20%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

button:
  - platform: restart
    name: ESP32 restart

  - platform: template
    name: SCD-41 Factory Reset
    on_press: 
        # Restore calibration to factory settings
        - scd4x.factory_reset: scd41
        - delay: 5s
        - lambda: |-
            ESP_LOGI("SCD-41 Factory", "Restored factory settings, now restarting ESP32");
            delay(500);
            ESP.restart();

  - platform: template
    name: Force SCD-41 Calibration
    on_press: 
      then:
        - globals.set:
            id: co2_calibrate
            value: 'true'
        # Set all RGB LED segments to orange to indicate calibration
        - light.addressable_set:
            id: rgb
            range_from: 0
            range_to: 7
            color_brightness: !lambda 'return id(rgb_brightness).state / 100.0;'
            red: 100%
            green: 60%
            blue: 0%
        # Calibrate SCD-41 CO2 sensor
        - scd4x.perform_forced_calibration:
            value: !lambda 'return id(co2_cal_val);'
            id: scd41

font:
  - file: "arial.ttf"
    id: font_sml
    size: 20
  - file: "arial.ttf"
    id: font_med
    size: 25
  - file: "arial.ttf"
    id: arial_40
    size: 40
  - file: "arial.ttf"
    id: co2_font
    size: 100
    # glyphs: 0123456789  # Include only the numerical glyphs
  - file:
      type: gfonts
      family: Roboto
      weight: 400
    id: gfont_roboto_reg
    size: 25
  - file:
      type: gfonts
      family: Roboto
      weight: 900
    id: gfont_roboto_bold
    size: 25

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO38

i2c:
  - id: bus_a # For Core2 AXP192 PMC
    sda: GPIO21
    scl: GPIO22
    scan: True
  - id: bus_b # For SCD-41 CO2 sensor on Core2 PCB MBus
    sda: 32
    scl: 33
    scan: true

touchscreen:
  - platform: ft63x6
    i2c_id: bus_a
    interrupt_pin: 39
    id: touch_screen
    on_touch:
      # M5Stack Core2 is 320 x 240 + 40 pixels below display active area for 3x red circular touch buttons
      - lambda: |-
          // ESP_LOGE("touch", "Current (x,y) = %d, %d", touch.x, touch.y);        // y-coord is half of expected
          // ESP_LOGE("touch", "Raw (x,y) = %d, %d\n", touch.x_raw, touch.y_raw);  // y-coord is correct
          id(touch_x) = touch.x_raw; 
          id(touch_y) = touch.y_raw;
      - lambda: |-
          if (touch.y_raw >= 120) // Try and prevent phantom touches causing screen to turn on when not actually touched
            axp192_axp192component->set_brightness(1.0);

binary_sensor:
  - platform: touchscreen
    name: Button A
    id: btn_a
    internal: True
    x_min: 0
    x_max: 106
    y_min: 120 # should be 240, but is half due to bug in ESPHome touch y-coordinate
    y_max: 140 # should be 280
    filters:
      - delayed_on: ${touch_delay}
    on_press:
      - display.page.show_next: lcd_display
      - component.update: lcd_display

  - platform: touchscreen
    name: Button B
    id: btn_b
    internal: True
    x_min: 107
    x_max: 213
    y_min: 120
    y_max: 140
    filters:
      - delayed_on: ${touch_delay}
    # on_press:
    #   - display.page.show: page2
    #   - component.update: lcd_display
  
  - platform: touchscreen
    name: Button C
    id: btn_c
    internal: True
    x_min: 214
    x_max: 319
    y_min: 120
    y_max: 140
    filters:
      - delayed_on: ${touch_delay}
    on_press:
      - lambda: |-
          id(cycle_pages) = !id(cycle_pages);
      - display.page.show: page4

  # Dim the display when the room lights are OFF, bright when room lights are ON
  - platform: homeassistant
    internal: true
    id: presence
    entity_id: light.led_strip_workshop_shelf_dimmer
    on_press: 
      - lambda: "axp192_axp192component->set_brightness(1.0);"
    on_release:
      - lambda: "axp192_axp192component->set_brightness(0.5);"

display:
  - platform: ili9xxx
    model: M5STACK
    id: lcd_display
    # dimensions: "320X240"
    update_interval: 500ms
    cs_pin: 5
    dc_pin: 15
    # transform achieves a rotation of 270° (landscape, inverted)
    # transform:
    #   swap_xy: True
    #   mirror_y: True
    pages:
      - id: page1
        lambda: |-
          int width = it.get_width();
          int height = it.get_height();
          int txt_xoffset = 5;
          int xx, yy = 0;

          // Indicate forced calibration is in progress
          if (id(co2_calibrate) == true) {
            // Giver user a couple of seconds to read the message
            if (id(general_timer)++ > 2) {
              id(general_timer) = 0;
              id(co2_calibrate) = false;
            }
            it.printf(it.get_width() / 2, it.get_height() / 2 - 15, id(font_sml), id(my_white), TextAlign::CENTER, "Calibrating to %d ppm", id(co2_cal_val));
          }
          else {
            it.rectangle(0, 0, it.get_width()-1, it.get_height()-1, id(mid_gray));
            it.printf(it.get_width() / 2, 40, id(arial_40), id(mid_gray), TextAlign::CENTER, "CO2 PPM");
            it.printf(it.get_width() / 2, it.get_height() / 2, id(co2_font), id(co2_txt_color), TextAlign::CENTER, "%.0f", id(co2).state);
          }
          // Blink the update indicator circle
          if (id(co2_updated) == true) {
            id(co2_updated) = false;
            it.filled_circle(it.get_width() - 20, 20, 8, id(mid_gray));
            // ESP_LOGI("Debug", "ttgo resolution: width = %d, height = %d", it.get_width(), it.get_height());
          }
      - id: page2
        lambda: |-
          auto grey = Color(128, 128, 128);
          auto darkgrey = Color(90, 90, 90);
          auto white = Color(255, 255, 255);
          auto orange = Color(255, 128, 0);
          auto yellow = Color(255, 255, 0);
          auto green = Color(0, 255, 0);
          auto cyan = Color(0, 255, 255);
          auto red = Color(255, 0, 0);

          int width = it.get_width();
          int height = it.get_height();
          int x = 115;
          int y = 10;

          // Display title
          it.printf(width / 2, y, id(font_med), white, TextAlign::CENTER, "Workshop Environment");

          // Display the graph
          it.graph(x, y + 20, id(co2_graph)); // Optionally specifying color here sets the grid color

          // Add y-axis labels
          x -= 6;
          y = 25;
          it.print(x, y, id(font_sml), orange, TextAlign::RIGHT, "2000");
          y += 187;
          it.print(x, y, id(font_sml), orange, TextAlign::RIGHT, "400");

          // Add x-axis label, i.e. graph duration
          x = 0;
          // y -= 25;
          it.print(x + 6, y, id(font_sml), orange, "60 min");
          it.rectangle(x, y - 2, 71, 27, orange);

          x = 7;
          y = 90;
          int x_val = 112;
          int y_inc = 25;
          // Display current Co2 value
          it.print(x, y, id(font_sml), darkgrey, TextAlign::LEFT, "Co2");
          it.printf(x_val - 8, y, id(font_sml), id(co2_txt_color), TextAlign::RIGHT, "%.0f", id(co2).state);

          // Display workshop temperature
          y += y_inc;
          it.print(x, y, id(font_sml), darkgrey, TextAlign::LEFT, "Temp");
          it.printf(x_val, y, id(font_sml), id(temp_txt_colour), TextAlign::RIGHT, "%.1f°", id(workshop_temperature).state);

      - id: page3
        lambda: |-
          it.printf(it.get_width() / 2, 40, id(arial_40), id(mid_gray), TextAlign::CENTER, "Workshop Temp");
          it.printf(it.get_width() / 2, it.get_height() / 2, id(co2_font), id(temp_txt_colour), TextAlign::CENTER, "%.1f", id(workshop_temperature).state);
          it.printf(it.get_width() - 35, it.get_height() / 2 + 20, id(arial_40), id(my_white), TextAlign::CENTER, "°C");

      - id: page4
        lambda: |-
          auto grey = Color(128, 128, 128);
          auto darkgrey = Color(90, 90, 90);
          auto white = Color(255, 255, 255);
          auto orange = Color(255, 128, 0);
          auto yellow = Color(255, 255, 0);
          auto green = Color(0, 255, 0);
          auto cyan = Color(0, 255, 255);
          auto red = Color(255, 0, 0);

          int y = 40;
          int y_inc = 30;
          it.printf(it.get_width() / 2, 20, id(arial_40), grey, TextAlign::CENTER, "Instructions");
          it.print(5, y, id(gfont_roboto_reg), white, TextAlign::LEFT, "Press BtnA to cycle through");
          y += y_inc;
          it.print(5, y, id(gfont_roboto_reg), white, TextAlign::LEFT, "dispaly pages manually.");
          y += y_inc;
          it.print(5, y, id(gfont_roboto_reg), white, TextAlign::LEFT, "Press BtnC to toggle auto");
          y += y_inc;
          it.print(5, y, id(gfont_roboto_reg), white, TextAlign::LEFT, "cycle of dispaly pages every");
          y += y_inc;
          it.print(5, y, id(gfont_roboto_reg), white, TextAlign::LEFT, "5 seconds.");
          y += y_inc + 15;
          it.print(5, y, id(gfont_roboto_reg), orange, TextAlign::LEFT, "Auto cycle:");
          it.printf(140, y, id(gfont_roboto_bold), cyan, TextAlign::LEFT, "%s", id(cycle_pages) ? "ON" : "OFF");

graph:
  - id: co2_graph
    # duration: 1h
    duration: 60min
    width: 200 # leave a 5-pixel gap on either side of graph. Display width = 320 - (2 * 5)
    height: 200
    x_grid: 10min     # time / div
    y_grid: 400.0     # Co2 PPM/div
    min_value: 400
    max_value: 2000 # Maximum y-axis value
    # max_range: 2000
    traces:
      - sensor: co2
        line_type: SOLID
        line_thickness: 4
        color: my_white

interval:
  - interval: 5s
    then:
      - if:
          condition:
            lambda: 'return id(cycle_pages);'
          then:
            - display.page.show_next: lcd_display
            - if:
                condition:
                  display.is_displaying_page: page4
                then:
                  - display.page.show: page1
            - component.update: lcd_display

sensor:
  - platform: homeassistant
    internal: true
    id: workshop_temperature
    entity_id: climate.ac_workshop
    attribute: "current_temperature"
    on_value_range: 
      - below: 17.0
        then:
          - globals.set:
              id: temp_txt_colour
              value: id(my_blue)
      - above: 17.0
        below: 26.0
        then:
          - globals.set:
              id: temp_txt_colour
              value: id(my_green)
      - above: 26.0
        below: 31.0
        then:
          - globals.set:
              id: temp_txt_colour
              value: id(my_orange)
      - above: 31.0
        then:
          - globals.set:
              id: temp_txt_colour
              value: id(my_red)

  - platform: axp192
    model: M5CORE2
    address: 0x34
    i2c_id: bus_a
    update_interval: 30s
    brightness: 100%
    battery_level:
      name: "Battery Level"
      id: batterylevel

  - platform: scd4x
    id: scd41
    i2c_id: bus_b
    automatic_self_calibration: True
    temperature_offset: 15.5 # this is subtracted from temperature
    update_interval: 15s
    co2:
      name: Sensor
      id: co2
      on_value:
        then:
          - globals.set:
              id: co2_updated
              value: 'true'
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  below: 700
              then:
                - globals.set:
                    id: co2_txt_color
                    value: id(my_green)
                - light.addressable_set:
                    id: rgb
                    color_brightness: !lambda 'return id(rgb_brightness).state / 100.0;'
                    range_from: 0
                    range_to: 9
                    red: 0%
                    green: 100%
                    blue: 0%
                - lambda: |-
                    ESP_LOGI("SCD41-CO2", "rgb == co2_good");
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  above: 700
                  below: 1000
              then:
                - globals.set:
                    id: co2_txt_color
                    value: id(my_yellow)
                - light.addressable_set:
                    id: rgb
                    color_brightness: !lambda 'return id(rgb_brightness).state / 100.0;'
                    range_from: 0
                    range_to: 9
                    red: 100%
                    green: 100%
                    blue: 0%
                - lambda: |-
                    ESP_LOGI("SCD41-CO2", "rgb == co2_moderate");
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  above: 1000
              then:
                - globals.set:
                    id: co2_txt_color
                    value: id(my_red)
                - light.addressable_set:
                    id: rgb
                    color_brightness: !lambda 'return id(rgb_brightness).state / 100.0;'
                    range_from: 0
                    range_to: 9
                    red: 100%
                    green: 0%
                    blue: 0%
                - lambda: |-
                    ESP_LOGI("SCD41-CO2", "rgb == co2_bad");

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO25
    default_transition_length: 50ms
    num_leds: 10
    rmt_channel: 0
    chipset: ws2812
    id: rgb
    name: "RGB LED x10"
    effects:
      - addressable_rainbow:
          name: Rainbow
          speed: 10
          width: 15

number:
  # This exposes a slider in HA to control LED strip brightness from front end
  - platform: template
    name: LED Brightness
    id: rgb_brightness
    initial_value: 50
    optimistic: True
    min_value: 0
    max_value: 100
    step: 5
    mode: slider
