esphome:
  name: co2-workshop
  friendly_name: CO2 Workshop
  comment: SCD-41 CO2 sensor on TTGO T-Display 240x135 TFT and strip of x8 SK6812 RGB LEDs

esp32:
  board: ttgo-t1
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

api:
ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.20.222
    gateway: 192.168.20.1
    subnet: 255.255.255.0

button:
  - platform: restart
    name: ESP32 restart

  - platform: template
    name: SCD-41 Factory Reset
    on_press: 
        # Restore calibration to factory settings
        - scd4x.factory_reset: scd41
        - delay: 5s
        - lambda: |-
            ESP_LOGI("SCD-41 Factory", "Restored factory settings, now restarting ESP32");
            delay(500);
            ESP.restart();

  - platform: template
    name: Force SCD-41 Calibration
    on_press: 
      then:
        - globals.set:
            id: co2_calibrate
            value: 'true'
        # Set all RGB LED segments to orange to indicate calibration
        - light.addressable_set:
            id: led_strip
            range_from: 0
            range_to: 7
            color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
            red: 100%
            green: 60%
            blue: 0%
        # Calibrate SCD-41 CO2 sensor
        - scd4x.perform_forced_calibration:
            value: !lambda 'return id(co2_cal_val);'
            id: scd41

globals:
  - id: general_timer
    type: int
    initial_value: '0'
  - id: lcd_txt_colour
    type: Color
    initial_value: id(my_green)
  - id: co2_updated
    type: bool
    initial_value: 'false'
  - id: co2_calibrate
    type: bool
    initial_value: 'false'
  - id: co2_cal_val
    type: int
    initial_value: '425' # outside average April 2022 is 419

font:
  - file: "arial.ttf"
    id: arial_20
    size: 20
  - file: "arial.ttf"
    id: arial_32
    size: 32
  - file: "arial.ttf"
    id: co2_font
    size: 85

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_orange
    # 255, 128, 0
    red: 100%
    green: 50%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: mid_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: dark_gray
    red: 20%
    green: 20%
    blue: 20%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

output:
  - platform: ledc
    pin: GPIO4
    id: backlight

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: ili9xxx
    model: ST7789V
    dimensions:
      width: 240
      offset_width: 40
      height: 135
      offset_height: 52
    auto_clear_enabled: True
    data_rate: 40MHz # Display is corrupted at 80MHz
    invert_colors: true # Very important
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    update_interval: 1s
    # transform achieves a rotation of 270Â° (landscape, inverted)
    transform:
      swap_xy: True
      mirror_y: True
    lambda: |-
      static int cal_msg_timout = 0;

      // Indicate forced calibration is in progress
      if (id(co2_calibrate) == true) {
        // Giver user a couple of seconds to read the message
        if (id(general_timer)++ > 2) {
          id(general_timer) = 0;
          id(co2_calibrate) = false;
        }
        it.printf(it.get_width() / 2, it.get_height() / 2 - 15, id(arial_20), id(my_white), TextAlign::CENTER, "Calibrating to %d ppm", id(co2_cal_val));
      }
      else {
        it.rectangle(0, 0, it.get_width()-1, it.get_height()-1, id(dark_gray));
        it.printf(it.get_width(), it.get_height(), id(arial_20), id(mid_gray), TextAlign::BOTTOM_RIGHT, "CO2 PPM");
        it.printf(it.get_width() / 2, it.get_height() / 2, id(co2_font), id(lcd_txt_colour), TextAlign::CENTER, "%.0f", id(co2).state);
      }
      // Blink the update indicator circle
      if (id(co2_updated) == true) {
        id(co2_updated) = false;
        it.filled_circle(it.get_width() - 20, 90, 8, id(mid_gray));
        // ESP_LOGI("Debug", "ttgo resolution: width = %d, height = %d", it.get_width(), it.get_height());
      }

i2c:
  - id: bus_a
    sda: 21
    scl: 22
    scan: true

sensor:
  - platform: scd4x
    id: scd41
    i2c_id: bus_a
    automatic_self_calibration: True
    temperature_offset: 15.5 # this is subtracted from temperature
    update_interval: 15s
    co2:
      name: Sensor
      id: co2
      on_value:
        then:
          - globals.set:
              id: co2_updated
              value: 'true'
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  below: 700
              then:
                - globals.set:
                    id: lcd_txt_colour
                    value: id(my_green)
                - light.addressable_set:
                    id: led_strip
                    color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                    range_from: 0
                    range_to: 7
                    red: 0%
                    green: 100%
                    blue: 0%
                - lambda: |-
                    ESP_LOGI("SCD41-CO2", "led_strip == co2_good");
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  above: 700
                  below: 1000
              then:
                - globals.set:
                    id: lcd_txt_colour
                    value: id(my_yellow)
                - light.addressable_set:
                    id: led_strip
                    color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                    range_from: 0
                    range_to: 7
                    red: 100%
                    green: 100%
                    blue: 0%
                - lambda: |-
                    ESP_LOGI("SCD41-CO2", "led_strip == co2_moderate");
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  above: 1000
              then:
                - globals.set:
                    id: lcd_txt_colour
                    value: id(my_red)
                - light.addressable_set:
                    id: led_strip
                    color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                    range_from: 0
                    range_to: 7
                    red: 100%
                    green: 0%
                    blue: 0%
                - lambda: |-
                    ESP_LOGI("SCD41-CO2", "led_strip == co2_bad");

light:
  # TTGO T-Display dimmable backlight
  - platform: monochromatic
    output: backlight
    name: "Display Backlight"
    id: ttgo_backlight
    restore_mode: ALWAYS_ON

  - platform: neopixelbus
    id: led_strip
    name: LED strip
    internal: True
    variant: SK6812
    pin: GPIO12
    num_leds: 8
    type: GRB
    restore_mode: ALWAYS_OFF
    default_transition_length: 200ms

binary_sensor:
  # Dim the display when workshop lights are off
  - platform: homeassistant
    internal: true
    id: presence
    entity_id: light.workshop_downlight
    on_press: 
      - light.turn_on:
          id: ttgo_backlight
          brightness: 100%
    on_release:
      - light.turn_on:
          id: ttgo_backlight
          brightness: 20%

number:
  # This exposes a slider in HA to control LED strip brightness from front end
  - platform: template
    name: LED Brightness
    id: led_strip_brightness
    initial_value: 100
    optimistic: True
    min_value: 0
    max_value: 100
    step: 5
    mode: slider
