esphome:
  name: "garage-door-bottom"
  friendly_name: Garage Door Bottom
  comment: Wemos D1 ESP32 to sense garage door bottom magnet

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  # Note: API password is unnecessary when using encryption key
  encryption:
    key: 97Ooghzi9zHrq83K0ClpDvhiCs7t+bpF8h8WMHpYrnc=

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.20.187
    gateway: 192.168.20.1
    subnet: 255.255.255.0

button:
  - platform: restart
    name: ESP32 restart

globals:
  # Used to set brightness of TM1637 and RGB LED
  - id: led_brightness
    type: int
    initial_value: '5' # brightness range of TM1637 is 0-7

# display:
#   platform: tm1637
#   id: tm1637_display
#   clk_pin: 16
#   dio_pin: 17
#   inverted: true
#   # intensity: 4 # Intensity 0-7
#   length: 4
#   lambda: |-
#     static int last_brightness = id(led_brightness);
#     if (id(led_brightness) != last_brightness) {
#       last_brightness = id(led_brightness);
#       it.printf("%1d", id(led_brightness));
#       id(tm1637_display).set_intensity(id(led_brightness));
#     }
#     else
#       it.printf("%.0f", id(magnet).state);


# text_sensor:
#   - platform: template
#     name: ${friendly_devicename} Uptime
#     id: uptime_human
#     icon: mdi:clock-start

sensor:
  - platform: esp32_hall
    id: magnet
    update_interval: 500ms
    internal: True
    filters:
      - median:
          window_size: 4
          send_every: 4

  # - platform: uptime
  #   name: ${friendly_devicename} Uptime
  #   internal: true
  #   id: uptime_sensor
  #   update_interval: 30s
  #   on_raw_value:
  #     then:
  #       - text_sensor.template.publish:
  #           id: uptime_human
  #           state: !lambda |-
  #             int seconds = round(id(uptime_sensor).raw_state);
  #             int days = seconds / (24 * 3600);
  #             seconds = seconds % (24 * 3600);
  #             int hours = seconds / 3600;
  #             seconds = seconds % 3600;
  #             int minutes = seconds /  60;
  #             seconds = seconds % 60;
  #             return (
  #               (days ? to_string(days) + "d " : "") +
  #               (hours ? to_string(hours) + "h " : "") +
  #               (minutes ? to_string(minutes) + "m " : "") +
  #               (to_string(seconds) + "s")).c_str();

  # - platform: wifi_signal
  #   name: ${friendly_devicename} WiFi Strength
  #   update_interval: 30s
      

binary_sensor:
  # Only used to increment TM1637 LED display brightness
  # - platform: gpio
  #   internal: true
  #   id: button_1
  #   pin:
  #     number: GPIO26
  #     inverted: true
  #     mode: input_pullup
  #   filters:
  #     - delayed_on: 50ms # debounce
  #   on_press: 
  #     lambda: |-
  #       id(led_brightness)++;
  #       if (id(led_brightness) > 7)
  #         id(led_brightness) = 0;

  - platform: analog_threshold
    name: Magnet
    sensor_id: magnet
    icon: "mdi:magnet"
    device_class: garage_door
    filters:
      - invert: # to invert garage open/close, you need to swap the upper and lower thresholds
      #- delayed_on_off: 2s
    threshold:
      upper: 140 # magnet is far from ESP32, magnet value has to be below to transition garage door to open
      lower: 170 # magnet is close to ESP32, magnet value has to be above to transition garage door to closed
    on_press: 
      then:
        # Garage door is open
        - light.addressable_set:
            id: led_strip
            # color_brightness: 0.3
            color_brightness: !lambda "return id(led_brightness) / 7.0;"
            range_from: 0
            range_to: 6
            red: 0%
            green: 100%
            blue: 0%
        - delay: 5s
        - light.turn_off:
            id: led_strip
    
    on_release: 
      then:
        # Garage door is closed
        - light.addressable_set:
            id: led_strip
            # color_brightness: 0.3
            color_brightness: !lambda "return id(led_brightness) / 7.0;"
            range_from: 0
            range_to: 6
            red: 100%
            green: 0%
            blue: 0%
        - delay: 5s
        - light.turn_off:
            id: led_strip
  
light:
  - platform: neopixelbus
    id: led_strip
    internal: True
    variant: SK6812
    pin: GPIO4
    num_leds: "7"
    type: GRB
    restore_mode: ALWAYS_OFF
    default_transition_length: 100ms
