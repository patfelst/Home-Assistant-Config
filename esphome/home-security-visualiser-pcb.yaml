substitutions:
  led_driveway_gate: "1"
  led_frontyard_motion_1: "2"
  led_garage_door: "3"
  led_porch_motion: "4"
  led_front_doorlock: "5"
  led_front_door: "6"
  led_roller_door: "7"
  led_workshop_window: "8"
  led_courtyard_motion: "9"
  led_cat_door: "10"
  led_laundry_window: "11"
  led_butlers_window: "12"
  led_alfresco_door: "13"
  led_backyard_motion: "14"
  led_pool_pump: "15"
  led_alfresco_motion: "16"
  led_sleep_mode: "17"
  led_aircon_mode: "18"
  led_pool_motion_led: "19"
  led_frontyard_motion_2: "20"
  cctv_motion_off_delay: "1.0min" # How long to leave CCTV motion LED red for
  brightness_sleep_mode: "35"
  brightness_awake_mode: "90"

esphome:
  name: home-security-visualiser-pcb
  friendly_name: Home security visualiser PCB
  on_boot:
    - priority: 600
      then:
        - light.addressable_set:
            id: led_strip
            color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
            range_from: 0
            range_to: 19
            # Orange
            red: 100%
            green: 65%
            blue: 0%
    - priority: -100
      then:
        - delay: 5s
        # Restore display of home security status
        - script.wait: set_led_brightness
        - script.execute: set_led_brightness

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "w3YSvgs8whfWMbP1CEZmd4qR1/PTaNnO163bW0xfe78="

ota:
  password: "ec2f051026400eeadcdcc81daff20a59"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Home-Security-Visualiser-Pcb"
    password: "pPEYAhrqq25y"

captive_portal:

button:
  - platform: restart
    name: ESP32 restart

script:
  # *********************************************************************
  # *************** BINARY SENSOR - OPEN/CLOSE LED SCRIPT ***************
  # *********************************************************************
  # Set RGB LED to indicate open / closed state of binary sensors from HA
  - id: set_openclosed_led
    mode: single
    parameters:
      led_state: boolean
      index: int
    then:
      - if:
          condition:
            lambda: 'return (led_state);'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # red
                red: 100%
                green: 0%
                blue: 0%
          else:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # green
                red: 0%
                green: 100%
                blue: 0%

  # *********************************************************************
  # ********************** SLEEP MODE LED SCRIPT ************************
  # *********************************************************************
  # Set RGB LED to indicate open / closed state of binary sensors from HA
  - id: set_sleep_led
    mode: single
    parameters:
      led_state: boolean
      index: int
    then:
      - if:
          condition:
            lambda: 'return (led_state);'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # purple
                red: 75%
                green: 0%
                blue: 100%
          else:
            - light.addressable_set:
                id: led_strip
                color_brightness: 0%
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # off
                red: 0%
                green: 0%
                blue: 0%

  # *********************************************************************
  # *************** BINARY SENSOR - MOTION ALERT SCRIPT *****************
  # *********************************************************************
  # Set RGB LED RED to indicate motion, then turn it off
  - id: set_motion_led
    mode: single
    parameters:
      led_state: boolean
      index: int
    then:
      - if:
          condition:
            lambda: 'return (led_state);'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # red
                red: 100%
                green: 0%
                blue: 0%
          else:
            - light.addressable_set:
                id: led_strip
                color_brightness: 0%
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # off
                red: 0%
                green: 0%
                blue: 0%

  # *********************************************************************
  # *********************** BRIGHTNESS SCRIPT ***************************
  # *********************************************************************
  # Update all LED brightness values
  - id: set_led_brightness
    mode: restart
    then:
      - script.execute:
          id: set_openclosed_led
          led_state: !lambda 'return id(workshop_window).state;'
          index: !lambda return ${led_workshop_window};
      - script.execute:
          id: set_openclosed_led
          led_state: !lambda 'return id(cat_door).state;'
          index: !lambda return ${led_cat_door};
      - script.execute:
          id: set_openclosed_led
          led_state: !lambda 'return id(alfresco_door).state;'
          index: !lambda return ${led_alfresco_door};
      - script.execute:
          id: set_openclosed_led
          led_state: !lambda 'return id(front_door).state;'
          index: !lambda return ${led_front_door};
      - script.execute:
          id: set_openclosed_led
          led_state: !lambda 'return id(front_doorlock).state == "unlocked";'
          index: !lambda return ${led_front_doorlock};
      - script.execute:
          id: set_cover_led
          led_state_str: !lambda 'return id(garage_door).state;'
          index: !lambda return ${led_garage_door};
      - script.execute:
          id: set_cover_led
          led_state_str: !lambda 'return id(driveway_gate).state;'
          index: !lambda return ${led_driveway_gate};
      - script.execute:
          id: set_motion_led
          led_state: !lambda 'return id(cat_door).state;'
          index: !lambda return ${led_cat_door};
      - script.execute:
          id: set_motion_led
          led_state: !lambda 'return id(cctv_motion_driveway).state;'
          index: !lambda return ${led_frontyard_motion_1};
      - script.execute:
          id: set_motion_led
          led_state: !lambda 'return id(cctv_motion_porch).state;'
          index: !lambda return ${led_porch_motion};
      - script.execute:
          id: set_motion_led
          led_state: !lambda 'return id(cctv_motion_alfresco).state;'
          index: !lambda return ${led_alfresco_motion};
      - script.execute:
          id: set_motion_led
          led_state: !lambda 'return id(cctv_motion_backyard).state;'
          index: !lambda return ${led_backyard_motion};
      - script.execute:
          id: set_motion_led
          led_state: !lambda 'return id(cctv_motion_courtyard).state;'
          index: !lambda return ${led_courtyard_motion};
      - script.execute:
          id: set_pool_led
          led_state_str: !lambda 'return id(pool_pump_power).state;'
          index: !lambda return ${led_pool_pump};
      - script.execute:
          id: set_sleep_led
          led_state: !lambda 'return id(sleep_mode).state;'
          index: !lambda return ${led_sleep_mode};
      - script.execute:
          id: set_aircon_led
          led_state_str: !lambda 'return id(aircon_mode).state;'
          index: !lambda return ${led_aircon_mode};

  # *********************************************************************
  # ************ COVER SCRIPT - GARGE DOOR AND DRIVEWAY GATE ************
  # *********************************************************************
  # Set RGB LED to indicate state of covers (garage door and driveway gate) from HA
  - id: set_cover_led
    mode: single
    parameters:
      led_state_str: string
      index: int
    then:
      - if:
          condition:
            or:
              - lambda: 'return (led_state_str == "opening");'
              - lambda: 'return (led_state_str == "closing");'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # yellow
                red: 100%
                green: 100%
                blue: 0%
      - if:
          condition:
            - lambda: 'return (led_state_str == "open");'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # red
                red: 100%
                green: 0%
                blue: 0%
      - if:
          condition:
            - lambda: 'return (led_state_str == "closed");'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # green
                red: 0%
                green: 100%
                blue: 0%

  # *********************************************************************
  # ****************** POOL SCRIPT - POOL PUMP SPEED ********************
  # *********************************************************************
  # Set RGB LED to indicate state of pool pump
  - id: set_pool_led
    mode: single
    parameters:
      led_state_str: string
      index: int
    then:
      - if:
          condition:
            - lambda: 'return (led_state_str == "Off");'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # off
                red: 0%
                green: 0%
                blue: 0%
      - if:
          condition:
            - lambda: 'return (led_state_str == "Low speed");'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # Light blue
                red: 0%
                green: 100%
                blue: 100%
      - if:
          condition:
            or:
              - lambda: 'return (led_state_str == "Medium speed");'
              - lambda: 'return (led_state_str == "High speed");'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # intense blue
                red: 0%
                green: 0%
                blue: 100%

  # *********************************************************************
  # ************************ AIR CON SCRIPT  ****************************
  # *********************************************************************
  # Set RGB LED to indicate state of air conditioner:
  # states include: off, cool, heat, fan_only, dry
  - id: set_aircon_led
    mode: single
    parameters:
      led_state_str: string
      index: int
    then:
      - if:
          condition:
            - lambda: 'return (led_state_str == "off");'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # off
                red: 0%
                green: 0%
                blue: 0%
      - if:
          condition:
            - lambda: 'return (led_state_str == "cool");'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # Light blue
                red: 0%
                green: 100%
                blue: 100%
      - if:
          condition:
            - lambda: 'return (led_state_str == "heat");'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # orange (255 165 0)
                red: 100%
                green: 65%
                blue: 0%
      - if:
          condition:
            or:
              - lambda: 'return (led_state_str == "dry");'
              - lambda: 'return (led_state_str == "fan_only");'
          then:
            - light.addressable_set:
                id: led_strip
                color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
                range_from: !lambda 'return index - 1;'
                range_to: !lambda 'return index - 1;'
                # pale green (152 251 152)
                red: 60%
                green: 98%
                blue: 57%


# ***********************************************************************
# ********* TEXT SENSORS - COVERS, LOCKS, PPOL PUMP, AIR CON ************
# ***********************************************************************
text_sensor:
  - platform: homeassistant
    internal: true
    id: garage_door
    entity_id: cover.garage_door
    on_value:
      then:
        - script.execute:
            id: set_cover_led
            led_state_str: !lambda 'return x;'
            index: !lambda return ${led_garage_door};
  - platform: homeassistant
    internal: true
    id: driveway_gate
    entity_id: cover.driveway_gate
    on_value:
      then:
        - script.execute:
            id: set_cover_led
            led_state_str: !lambda 'return x;'
            index: !lambda return ${led_driveway_gate};
  - platform: homeassistant
    internal: true
    id: front_doorlock
    entity_id: lock.yale_smartlock_front_door
    on_value:
      then:
        - script.execute:
            id: set_openclosed_led
            led_state: !lambda 'return (x == "unlocked");'
            index: !lambda return ${led_front_doorlock};
  - platform: homeassistant
    internal: true
    id: pool_pump_power
    entity_id: sensor.pool_pump_status
    on_value:
      then:
        - script.execute:
            id: set_pool_led
            led_state_str: !lambda 'return x;'
            index: !lambda return ${led_pool_pump};
  - platform: homeassistant
    internal: true
    id: aircon_mode
    entity_id: climate.ac
    on_value:
      then:
        - script.execute:
            id: set_aircon_led
            led_state_str: !lambda 'return x;'
            index: !lambda return ${led_aircon_mode};

# ***********************************************************************
# ********************* BINARY SENSORS - OPEN/CLOSED ********************
# ***********************************************************************
binary_sensor:
  - platform: homeassistant
    internal: true
    id: workshop_window
    entity_id: binary_sensor.workshop_window_contact
    on_state:
      then:
        - script.execute:
            id: set_openclosed_led
            led_state: !lambda 'return x;'
            index: !lambda return ${led_workshop_window}; // This syntax is a bug, Jesserockz looking into it
  - platform: homeassistant
    internal: true
    id: alfresco_door
    entity_id: binary_sensor.alfresco_door_contact
    on_state:
      then:
        - script.execute:
            id: set_openclosed_led
            led_state: !lambda 'return x;'
            index: !lambda return ${led_alfresco_door};
  - platform: homeassistant
    internal: true
    id: front_door
    entity_id: binary_sensor.front_door_aqara_contact
    on_state:
      then:
        - script.execute:
            id: set_openclosed_led
            led_state: !lambda 'return x;'
            index: !lambda return ${led_front_door};

  # *********************************************************************
  # ******************* BINARY SENSOR - MOTION ALERT ********************
  # *********************************************************************
  - platform: homeassistant
    internal: true
    id: cat_door
    entity_id: binary_sensor.cat_door_contact
    filters:
      delayed_off: 30s
    on_state:
      then:
        - script.execute:
            id: set_motion_led
            led_state: !lambda 'return x;'
            index: !lambda return ${led_cat_door};
  - platform: homeassistant
    internal: true
    id: cctv_motion_driveway
    entity_id: binary_sensor.front_yard_motion
    filters:
      delayed_off: ${cctv_motion_off_delay}
    on_state:
      then:
        - script.execute:
            id: set_motion_led
            led_state: !lambda 'return x;'
            index: !lambda return ${led_frontyard_motion_1};
  - platform: homeassistant
    internal: true
    id: cctv_motion_porch
    entity_id: binary_sensor.ds_7608ni_i2_8p0820220623ccrrk17144184wcvu_2_linedetection
    filters:
      delayed_off: ${cctv_motion_off_delay}
    on_state:
      then:
        - script.execute:
            id: set_motion_led
            led_state: !lambda 'return x;'
            index: !lambda return ${led_porch_motion};
  - platform: homeassistant
    internal: true
    id: cctv_motion_alfresco
    entity_id: binary_sensor.ds_7608ni_i2_8p0820220623ccrrk17144184wcvu_3_fielddetection
    filters:
      delayed_off: ${cctv_motion_off_delay}
    on_state:
      then:
        - script.execute:
            id: set_motion_led
            led_state: !lambda 'return x;'
            index: !lambda return ${led_alfresco_motion};
  - platform: homeassistant
    internal: true
    id: cctv_motion_backyard
    entity_id: binary_sensor.ds_7608ni_i2_8p0820220623ccrrk17144184wcvu_4_fielddetection
    filters:
      delayed_off: ${cctv_motion_off_delay}
    on_state:
      then:
        - script.execute:
            id: set_motion_led
            led_state: !lambda 'return x;'
            index: !lambda return ${led_backyard_motion};
  - platform: homeassistant
    internal: true
    id: cctv_motion_courtyard
    entity_id: binary_sensor.ds_7608ni_i2_8p0820220623ccrrk17144184wcvu_5_linedetection
    filters:
      delayed_off: ${cctv_motion_off_delay}
    on_state:
      then:
        - script.execute:
            id: set_motion_led
            led_state: !lambda 'return x;'
            index: !lambda return ${led_courtyard_motion};
  
  # *********************************************************************
  # ********************* INPUT BOOLEAN - SLEEP MODE ********************
  # *********************************************************************
  - platform: homeassistant
    internal: true
    id: sleep_mode
    entity_id: input_boolean.sleep_mode
    on_press:
      then:
        - script.wait: set_sleep_led
        - script.execute:
            id: set_sleep_led
            led_state: True
            index: !lambda return ${led_sleep_mode};

        - number.set:
            id: led_strip_brightness
            value: ${brightness_sleep_mode}
        # Restore display of home security status
        - script.wait: set_led_brightness
        - script.execute: set_led_brightness
    
    on_release: 
      then:
        - script.wait: set_sleep_led
        - script.execute:
            id: set_sleep_led
            led_state: False
            index: !lambda return ${led_sleep_mode};

        - number.set:
            id: led_strip_brightness
            value: ${brightness_awake_mode}
        # Restore display of home security status
        - script.wait: set_led_brightness
        - script.execute: set_led_brightness

  # *********************************************************************
  # ********************** BINARY SENSOR - BUTTON 3 *********************
  # *********************************************************************
  # Do all LEDs test, then set brightness to AWAKE mode (bright)
  - platform: gpio
    id: button_3
    internal: True
    pin:
      number: GPIO4
      inverted: True
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 50ms
    on_press:
      # toggle LED brightness levels between dim and bright
      then:
        - if:
            condition:
              lambda: 'return id(led_strip_brightness).state == ${brightness_awake_mode};'
            then:
              - number.set:
                  id: led_strip_brightness
                  value: ${brightness_sleep_mode}
            else:
              - number.set:
                  id: led_strip_brightness
                  value: ${brightness_awake_mode}
        - light.addressable_set:
            id: led_strip
            color_brightness: !lambda 'return id(led_strip_brightness).state / 100.0;'
            # off
            red: 0%
            green: 0%
            blue: 0%
        # Restore display of home security status
        - script.wait: set_led_brightness
        - script.execute: set_led_brightness

  # *********************************************************************
  # ***************** BINARY SENSOR - BUTTON "BOOT" (GPIO0) *************
  # *********************************************************************
  # Set brightness to dim for night mode
  - platform: gpio
    id: button_boot
    internal: True
    pin:
      number: GPIO0
      inverted: True
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 50ms
    on_press:
      # toggle LED test mode - all LEDs on yellow
      then:
        - if:
            condition:
              lambda: |-
                static boolean test_mode = false;
                test_mode = !test_mode;
                if (test_mode)
                  return true;
                else
                  return false;
            then:
              - light.addressable_set:
                  id: led_strip
                  # yellow
                  red: 100%
                  green: 100%
                  blue: 0%
            else:
              - light.addressable_set:
                  id: led_strip
                  # off
                  red: 0%
                  green: 0%
                  blue: 0%
              # Restore display of home security status
              - script.wait: set_led_brightness
              - script.execute: set_led_brightness

# ***********************************************************************
# ************************ RGB LED LIGHTS *******************************
# ***********************************************************************
light:
  - platform: neopixelbus
    id: led_strip
    name: LED strip
    internal: False
    variant: WS2812
    pin: GPIO1
    num_leds: 20
    type: GRB
  - platform: partition
    name: "Ensuite fan indicator"
    segments:
      - id: led_strip
        from: 17 # Spare LED 2, i.e. LED 18
        to: 17

# ***********************************************************************
# ************* NUMBER - BRIGHTNESS FOR RGB LEDS LIGHTS *****************
# ***********************************************************************
number:
  - platform: template
    name: LED strip brightness
    id: led_strip_brightness
    initial_value: ${brightness_awake_mode}
    optimistic: True
    min_value: 0
    max_value: 100
    step: 5
    mode: slider
    set_action:
      then:
        - logger.log:
            level: INFO
            format: "Setting brightness to %.1f"
            args: ["x"]
        - delay: 100ms
        # Restore display of home security status
        - script.wait: set_led_brightness
        - script.execute: set_led_brightness