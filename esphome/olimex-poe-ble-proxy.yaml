esphome:
  name: olimex-poe-ble-proxy
  friendly_name: olimex-poe-ble-proxy

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

ota:

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 0
  power_pin: GPIO12

bluetooth_proxy:
  active: True

# button:
#   - platform: template
#     name: "Start BLE Scan"
#     on_press:
#        - esp32_ble_tracker.start_scan

esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    # duration: 15s
    continuous: True
    active: True

  # on_ble_advertise:
  #     then:
  #       - lambda: |-
  #           ESP_LOGD("ble_adv", "New BLE device");
  #           ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
  #           ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
  #           ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
  #           for (auto uuid : x.get_service_uuids()) {
  #               ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
  #           }
  #           ESP_LOGD("ble_adv", "  Advertised service data:");
  #           for (auto data : x.get_service_datas()) {
  #               ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
  #           }
  #           ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
  #           for (auto data : x.get_manufacturer_datas()) {
  #               ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
  #           }
  # on_scan_end:
  #   - then:
  #       - lambda: |-
  #            ESP_LOGD("ble_auto", "The scan has ended!");
