substitutions:
  touch_delay: 10ms
  icon_size: "72"
  dot_size: "4"
  ema_alpha: "1.0"

esphome:
  name: ${dev_name}
  friendly_name: ${friend_name}
  comment: M5Stack Core2 home power visualiser
  platformio_options:
    board_build.f_flash: 80000000L # set FLASH frequency to 80MHz
    board_build.partitions: default_16MB.csv
  on_boot: 
    priority: 600
    then:
      # This is needed otherwise setting to 100% later doesn't work, no idea why
      - lambda: "id(axp192_id).set_brightness(0.5);"
      - lambda: "std::fill_n(id(house_history), 200, 0.0);"

external_components:
  # also try this custom component, has more features. e.g. 
  # should be able to set VBUS as an input from external +5V via (Grove port) using AXP192 GPIO0 ==> BUS_PW_EN / N_VBUSEN
  # https://gitlab.com/geiseri/esphome_extras/-/tree/main/components/axp192
  - source: github://Pionizer/pionizer-axp192
    components: [axp192]
    refresh: 1days
  # - source:
  #     type: git
  #     url: https://github.com/ssieb/esphome
  #     ref: graph
  #   components: [ graph ]
  #   refresh: 1min
  # - source:
  #     type: git
  #     url: https://github.com/esphome/esphome
  #     ref: dev
  #   components: [ graph ]
  - source: github://pr#8296
    components: [ touchscreen ]
    refresh: 0s
  # - source: github://pr#5997
  #   components: [ display, touchscreen, ft63x6 ]
  #   refresh: 0s

esp32:
  board: m5stack-core-esp32
  framework:
    type: arduino
  variant: ESP32
  flash_size: 16MB

logger:
  level: DEBUG
  # logs:
  #   component: ERROR # Filter out "time taken too long errors"
  #   homeassistant.sensor: INFO
  #   axp192.sensor: INFO

api:
  encryption:
    key: !secret api_key

ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

globals:
  - id: touch_x
    type: int
    restore_value: no
    initial_value: "0"
  - id: touch_y
    type: int
    restore_value: no
    initial_value: "0"
  - id: house_history
    type: float[200] # Num points based on pixel width of graph x-axis
  - id: house_hist_ptr
    type: int
    initial_value: '0'
    restore_value: no
  - id: solar_history
    type: float[200]
  - id: solar_hist_ptr
    type: int
    initial_value: '0'
    restore_value: no

sensor:
  - platform: axp192
    id: axp192_id
    model: M5CORE2
    address: 0x34
    i2c_id: bus_a
    update_interval: 30s
    brightness: 100%
    battery_level:
      name: "Battery Level"
      id: batterylevel

  - platform: homeassistant
    internal: true
    id: ha_grid_power
    entity_id: sensor.solarnet_power_grid

  - platform: homeassistant
    internal: true
    id: ha_solar_power
    entity_id: sensor.solarnet_power_photovoltaics
    # filters:
    #   - exponential_moving_average:
    #       alpha: ${ema_alpha}

  - platform: homeassistant
    internal: true
    id: ha_solar_power_smoothed
    entity_id: sensor.solarnet_power_photovoltaics
    filters:
      - throttle_average: 18s
    on_value: 
      then:
        lambda: |-
          if (!isnan(x)) {
            int array_size = sizeof(id(solar_history)) / sizeof(float);
            float alpha = ${ema_alpha};

            if (id(solar_hist_ptr) < array_size) {
              // Store the new value in the array
              if (id(solar_hist_ptr) < 1)
                id(solar_history)[id(solar_hist_ptr)++] = x; // Don't filter the first value
              else {
                id(solar_history)[id(solar_hist_ptr)] = (x * alpha) + id(solar_history)[id(solar_hist_ptr) - 1] * (1.0 - alpha);
                id(solar_hist_ptr)++;
              }
              // ESP_LOGI("solar power", "Current value ptr=%d, solar power smoothed=%.1f", id(solar_hist_ptr) - 1, id(solar_history)[id(solar_hist_ptr) - 1]);
            }
            else if (id(solar_hist_ptr) == array_size) {
              // Array is now full, so begin shfting array left, i.e. discarding old samples, and insert new samples at [199]
              // In this condition, solar_hist_ptr equals array size, i.e. 200 so be careful not to overflow array index 
              for (int i = 1; i < array_size; i++) {
                id(solar_history)[i - 1] = id(solar_history)[i];
              }
              // Store the new value at the end of the array
              id(solar_history)[array_size - 1] = (x * alpha) + id(solar_history)[array_size - 2] * (1.0 - alpha);
            }
            // ESP_LOGI("on value", "ptr=%d, solar_history{0, 1, 2, 3..last-1, last}={%.1f, %.1f, %.1f, %.1f, %.1f, %.1f}",
            //   id(solar_hist_ptr),
            //   id(solar_history)[0],
            //   id(solar_history)[1],
            //   id(solar_history)[2],
            //   id(solar_history)[3],
            //   id(solar_history)[array_size - 2],
            //   id(solar_history)[array_size - 1]);
          }

  - platform: homeassistant
    internal: true
    id: ha_house_power
    entity_id: sensor.solarnet_power_load
    filters:
      - multiply: -1.0
      # - exponential_moving_average:
      #     alpha: ${ema_alpha}

  - platform: homeassistant
    internal: true
    id: ha_house_power_smoothed
    entity_id: sensor.solarnet_power_load
    filters:
      - multiply: -1.0
      # Calculate the sample rate to fill the array for 200 pixels over the graph duration
      # 4 hr duration: 4 hr * 60 mins * 60 secs / 200 pixels = 14,400 seconds / 200 pixels = 72 seconds / sample
      # 1 hr duration: 1 hr * 60 mins * 60 secs / 200 pixels = 3600 seconds / 200 pixels = 18 seconds / sample
      # 30 min duration: 0.5 hr * 60 mins * 60 secs / 200 pixels = 1800 seconds / 200 pixels = 9 seconds / sample
      - throttle_average: 18s
    on_value: 
      then:
        lambda: |-
          if (!isnan(x)) {
            int array_size = sizeof(id(house_history)) / sizeof(float);
            float alpha = ${ema_alpha};
            // ESP_LOGI("on value", "array size=%d", array_size);

            // ESP_LOGI("on value", "new value=%.1f", x);

            // ****** FOR TESTING !!!! ********
            // array_size = 5;

            if (id(house_hist_ptr) < array_size) {
              // Store the new value in the array
              if (id(house_hist_ptr) < 1)
                id(house_history)[id(house_hist_ptr)++] = x; // Don't filter the first value
              else {
                id(house_history)[id(house_hist_ptr)] = (x * alpha) + id(house_history)[id(house_hist_ptr) - 1] * (1.0 - alpha);
                id(house_hist_ptr)++;
              }
              // ESP_LOGI("house power", "Current value ptr=%d, house power smoothed=%.1f", id(house_hist_ptr) - 1, id(house_history)[id(house_hist_ptr) - 1]);
            }
            else if (id(house_hist_ptr) == array_size) {
              // Array is now full, so begin shfting array left, i.e. discarding old samples, and insert new samples at [199]
              // In this condition, house_hist_ptr equals array size, i.e. 200 so be careful not to overflow array index 
              for (int i = 1; i < array_size; i++) {
                id(house_history)[i - 1] = id(house_history)[i];
              }
              // Store the new value at the end of the array
              id(house_history)[array_size - 1] = (x * alpha) + id(house_history)[array_size - 2] * (1.0 - alpha);
            }
            // ESP_LOGI("on value", "ptr=%d, house_history{0, 1, 2, 3..last-1, last}={%.1f, %.1f, %.1f, %.1f, %.1f, %.1f}",
            //   id(house_hist_ptr),
            //   id(house_history)[0],
            //   id(house_history)[1],
            //   id(house_history)[2],
            //   id(house_history)[3],
            //   id(house_history)[array_size - 2],
            //   id(house_history)[array_size - 1]);
          }

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO38

i2c:
  - id: bus_a
    sda: GPIO21
    scl: GPIO22
    scan: True

font:
  - file: "arial.ttf"
    id: font_sml
    size: 20
  - file: "arial.ttf"
    id: font_med
    size: 25
  - file: "arial.ttf"
    id: font_lge
    size: 30

touchscreen:
  - platform: ft63x6
    i2c_id: bus_a
    interrupt_pin: 39
    id: touch_screen
    calibration:
      x_min: 0
      x_max: 320
      y_min: 0
      y_max: 240
    on_touch:
      # M5Stack Core2 is 320 x 240 + 40 pixels below display active area for 3x red circular touch buttons
      - lambda: |-
          ESP_LOGI("touch", "Current (x,y) = %d, %d", touch.x, touch.y);        // y-coord is half of expected
          ESP_LOGI("touch", "Raw (x,y) = %d, %d\n", touch.x_raw, touch.y_raw);  // y-coord is correct
          // float core2_val = id(axp192_id).GetBatVoltage();
          // float core2_val = id(axp192_id).GetVinVoltage();
          // float core2_val = id(axp192_id).GetVBusVoltage();
          id(touch_x) = touch.x_raw; 
          id(touch_y) = touch.y_raw;
      - lambda: |-
          if (touch.y_raw >= 120) // Try and prevent phantom touches causing screen to turn on when not actually touched
            id(axp192_id).set_brightness(1.0);

binary_sensor:
  - platform: touchscreen
    name: Button A
    id: btn_a
    internal: True
    use_raw: true
    x_min: 0
    x_max: 106
    y_min: 240 # should be 240, but is half due to bug in ESPHome touch y-coordinate
    y_max: 280 # should be 280
    filters:
      - delayed_on: ${touch_delay}
    on_press:
      - display.page.show: page1
      - component.update: lcd_display

  - platform: touchscreen
    name: Button B
    id: btn_b
    internal: True
    use_raw: true
    x_min: 107
    x_max: 213
    y_min: 240
    y_max: 280
    filters:
      - delayed_on: ${touch_delay}
    on_press:
      - display.page.show: page2
      - component.update: lcd_display
  
  - platform: touchscreen
    name: Button C
    id: btn_c
    internal: True
    use_raw: true
    x_min: 214
    x_max: 319
    y_min: 240
    y_max: 280
    filters:
      - delayed_on: ${touch_delay}
    on_press:
      - display.page.show: page3
      - component.update: lcd_display

  - platform: homeassistant
    internal: true
    id: presence
    entity_id: ${room_light}
    on_press: 
      - lambda: "id(axp192_id).set_brightness(1.0);"
    on_release:
      - lambda: "id(axp192_id).set_brightness(0.5);"

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_orange
    # 255, 128, 0
    red: 100%
    green: 50%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: mid_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: dark_gray
    red: 20%
    green: 20%
    blue: 20%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_cyan
    red: 0%
    green: 100%
    blue: 100%

psram:

display:
  - platform: ili9xxx
    model: M5STACK
    id: lcd_display
    invert_colors: true
    # dimensions: "320X280"
    update_interval: 500ms
    cs_pin: 5
    dc_pin: 15
    pages:
      - id: page1
        lambda: |-
          int width = it.get_width();
          int height = it.get_height();
          int txt_xoffset = 5;
          int xx, yy = 0;

          auto grey = Color(128, 128, 128);
          auto grey_light = Color(50, 50, 50);
          auto white = Color(255, 255, 255);
          auto black = Color(0, 0, 0);
          auto orange = Color(255, 128, 0);
          auto yellow = Color(255, 255, 0);
          auto green = Color(0, 255, 0);
          auto cyan = Color(0, 255, 255);
          auto red = Color(255, 0, 0);

          // ***
          // *** Determine POWER
          // ***

          // *** DETERMINE SOLAR POWER
          // At night the solar sensor is "NaN" so check for it before using
          float solar_kw = 0.0;
          if (!isnan(id(ha_solar_power).state))
            solar_kw = id(ha_solar_power).state;
          // solar_kw = id(sim_solar).state; // Use number component to simulate solar power

          // DETERMINE HOUSE POWER
          //  Note: Negative means house consuming (should almost always be the case)
          float house_kw = 0.0;
          if (!isnan(id(ha_house_power).state))
            house_kw = id(ha_house_power).state;
          // house_kw = id(sim_house).state;   // Use number component to simulate house power

          // DETERMINE GRID POWER
          // Note: Negative = Export, Positive = Import
          float grid_kw = 0.0;
          if (!isnan(id(ha_grid_power).state))
            grid_kw = id(ha_grid_power).state;
          // grid_kw = id(sim_grid).state; // Use number component to simulate grid power

          // ***
          // *** Display images
          // ***
          it.image(width/2 - ${icon_size}/2, 0, id(img_sun));
          it.image(0, height - ${icon_size}, id(img_house));
          it.image(width - ${icon_size}, height - ${icon_size}, id(img_powerlines));

          // Dispaly units of kW
          xx = width - 23;
          yy = 18;
          it.filled_circle(xx, yy, 18, grey);
          it.print(xx, yy, id(font_sml), black, TextAlign::CENTER, "kW");

          // ***
          // *** Display POWER
          // ***

          // *** Display SOLAR power
          xx = width/2 - ${icon_size}/2 - txt_xoffset;
          yy = 15;
          it.printf(xx, yy, id(font_lge), yellow, TextAlign::RIGHT, "%.1f", solar_kw);

          // *** Display HOUSE power
          xx = 5;
          yy = height - ${icon_size} - 13;
          it.printf(xx, yy, id(font_lge), cyan, TextAlign::LEFT, "%.1f", house_kw);

          // ***
          // *** DETERMINE FLOWS
          // ***
          float flow_solar_house = 0.0;
          float flow_solar_grid = 0.0;
          if (solar_kw >= house_kw) {
            flow_solar_house = house_kw;
            flow_solar_grid = solar_kw - house_kw;
          }
          else
            flow_solar_house = solar_kw;


          // ***
          // *** DISPLAY FLOWS
          // ***
          
          // Flow line SOLAR-GRID
          it.line(width/2 + 15, ${icon_size} - 15, width - 50, height - ${icon_size} + 15, grey_light);
          // Flow line SOLAR-HOUSE
          it.line(width/2 - 15, ${icon_size} - 15, 50, height - ${icon_size} + 15, grey_light);
          // Flow line GRID-HOUSE
          yy = height - ${icon_size}/2;
          it.line(${icon_size}, yy, width - ${icon_size}, yy, grey_light);

          static int solar_grid_ind_x = width/2 + 15;
          static int solar_grid_ind_y = ${icon_size} - 15;
          // *** Display FLOW SOLAR-GRID
          if (flow_solar_grid > 0.05) {
            xx = (width * 3)/4 - 10;
            yy = height/2 - 30;
            it.printf(xx, yy, id(font_lge), green, TextAlign::LEFT, "%.1f", flow_solar_grid);

            // Display moving direction indicator
            if (solar_grid_ind_y >= (height - 60)) {
              solar_grid_ind_x = width/2 + 15;
              solar_grid_ind_y = ${icon_size} - 15;
            }
            it.filled_circle(solar_grid_ind_x, solar_grid_ind_y, ${dot_size}, green);
            solar_grid_ind_x += 6;
            solar_grid_ind_y += 8;
          }

          static int solar_house_ind_x = width/2 - 15;
          static int solar_house_ind_y = ${icon_size} - 15;
          // *** Display FLOW SOLAR-HOUSE
          if (flow_solar_house > 0.05) {
            xx = width/4 + 10;
            yy = height/2 - 30;
            it.printf(xx, yy, id(font_lge), green, TextAlign::RIGHT, "%.1f", flow_solar_house);

            // Display moving direction indicator
            if (solar_house_ind_y >= (height - 60)) {
              solar_house_ind_x = width/2 - 15;
              solar_house_ind_y = ${icon_size} - 15;
            }
            it.filled_circle(solar_house_ind_x, solar_house_ind_y, ${dot_size}, green);
            solar_house_ind_x -= 6;
            solar_house_ind_y += 8;
          }

          static int grid_house_ind_x = width - ${icon_size} - 5;
          // *** Display FLOW GRID-HOUSE
          if (grid_kw > 0.05) {
            xx = width/2;
            yy = height - ${icon_size}/2;
            // Only display Import flow
            it.printf(xx, yy - 25, id(font_lge), red, TextAlign::CENTER, "%.1f", grid_kw);

            if (grid_house_ind_x <= ${icon_size} + 5) {
              grid_house_ind_x = width - ${icon_size} - 5;
            }
            it.filled_circle(grid_house_ind_x, yy, ${dot_size}, red);
            grid_house_ind_x -= 10;
          }

      - id: page2
        lambda: |-
          auto grey = Color(128, 128, 128);
          auto white = Color(255, 255, 255);
          auto orange = Color(255, 128, 0);
          auto yellow = Color(255, 255, 0);
          auto green = Color(0, 255, 0);
          auto cyan = Color(0, 255, 255);
          auto red = Color(255, 0, 0);

          int scr_width = it.get_width();
          int scr_height = it.get_height();

          // Graph top left [x, y]
          int x_left = 115;
          int y_top = 30;

          // Graph width and height
          int gr_width = sizeof(id(house_history)) / sizeof(float);
          int gr_height = 200;

          // Pixel coords bottom-right of graph
          int y_bot = y_top + gr_height;
          int x_right = x_left + gr_width;

          // Range of y-axis is 12kW
          float y_range = 12.0;

          // Y-coord scale factor
          float y_scale = (float)gr_height / y_range;

          // Line segment y-coords
          int y1 = 0;
          int y2 = 0;

          // Display title
          it.printf(scr_width / 2, 10, id(font_med), id(my_white), TextAlign::CENTER, "Solar / Home Power");

          // Draw graph border
          it.rectangle(x_left, y_top, gr_width, gr_height, grey);

          // ********************
          // Graph house power
          // ********************
          int x_plot = 0;
          if (id(house_hist_ptr) > 1) {
            for (int i=0; i < id(house_hist_ptr) - 1; i++) {
              y1 = (int)round((float)y_bot - (id(house_history)[i + 0] * y_scale)); // round(0.40)=0.0, round(0.5)=1.0, round(0.6)=1.0
              y2 = (int)round((float)y_bot - (id(house_history)[i + 1] * y_scale));

              // When history array is filling, move the start point left. Once array is full, plot starts at x_left
              x_plot = x_right - id(house_hist_ptr) + i;
              it.line(x_plot, y1, x_plot + 1, y2, cyan);
              // ESP_LOGI("House", "For y1-raw=%.1f, y2-raw=%.1f: line(x1=%d, y1=%d, x2=%d, y2=%d)", id(house_history)[i + 0], id(house_history)[i + 1], x_plot, y1, x_plot + 1, y2);
            }
          }

          // ********************
          // Graph solar power
          // ********************
          x_plot = 0;
          if (id(solar_hist_ptr) > 1) {
            for (int i=0; i < id(solar_hist_ptr) - 1; i++) {
              y1 = (int)round((float)y_bot - (id(solar_history)[i + 0] * y_scale)); // round(0.40)=0.0, round(0.5)=1.0, round(0.6)=1.0
              y2 = (int)round((float)y_bot - (id(solar_history)[i + 1] * y_scale));

              // When history array is filling, move the start point left. Once array is full, plot starts at x_left
              x_plot = x_right - id(solar_hist_ptr) + i;
              it.line(x_plot, y1, x_plot + 1, y2, yellow);
              // ESP_LOGI("Solar", "For y1-raw=%.1f, y2-raw=%.1f: line(x1=%d, y1=%d, x2=%d, y2=%d)", id(solar_history)[i + 0], id(solar_history)[i + 1], x_plot, y1, x_plot + 1, y2);
            }
          }

          // Display x-axis "(along y = zero), for graph with negative and positive values
          // y += (20 + (200 / 2));
          // it.line(x, y, scr_width - 5, y, grey);
          // it.line(x, y + 1, scr_width - 5, y + 1, grey);

          // Add y-axis labels
          x_left -= 6;
          y_top = 25;
          it.print(x_left, y_top, id(font_sml), orange, TextAlign::RIGHT, "12kW");
          y_top += 187;
          it.print(x_left, y_top, id(font_sml), orange, TextAlign::RIGHT, "0kW");

          // Add x-axis label, i.e. graph duration
          // y_top -= 80;
          x_left = 5;
          it.print(x_left + 6, y_top, id(font_sml), orange, "1 hr");
          it.rectangle(x_left, y_top - 2, 56, 27, orange);

          // Display numeric values
          float solar = id(ha_solar_power).state;
          float house = id(ha_house_power).state;
          float grid = id(ha_grid_power).state;

          x_left = 7;
          y_top = 65;
          int y_inc = 25;

          // Display EMA filter factor and page number
          it.printf(x_left, y_top, id(font_sml), grey, TextAlign::LEFT, "Filt %.1f (p2)", ${ema_alpha});

          y_top += y_inc;
          it.printf(x_left, y_top, id(font_sml), yellow, TextAlign::LEFT, "Solar %.1f", solar);

          y_top += y_inc;
          it.printf(x_left, y_top, id(font_sml), cyan, TextAlign::LEFT, "House %.1f", house);

          y_top += y_inc;
          if (house > (solar + 0.05))
            it.printf(x_left, y_top, id(font_sml), red, TextAlign::LEFT, "Import %.1f", grid);
          else if (solar > (house + 0.05))
            it.printf(x_left, y_top, id(font_sml), green, TextAlign::LEFT, "Export %.1f", -grid);

      - id: page3
        lambda: |-
          auto grey = Color(128, 128, 128);
          auto white = Color(255, 255, 255);
          auto orange = Color(255, 128, 0);
          auto yellow = Color(255, 255, 0);
          auto green = Color(0, 255, 0);
          auto cyan = Color(0, 255, 255);
          auto red = Color(255, 0, 0);

          int scr_width = it.get_width();
          int scr_height = it.get_height();

          // Graph top left [x, y]
          int x_left = 115;
          int y_top = 30;

          // Display title
          it.printf(scr_width / 2, 10, id(font_med), id(my_white), TextAlign::CENTER, "Solar / Home Power");

          // ESPHome graph, also creates border and gridlines
          it.graph(x_left, y_top, id(power_graph)); // Optionally specifying color here sets the grid color

          // Add y-axis labels
          x_left -= 6;
          y_top = 25;
          it.print(x_left, y_top, id(font_sml), orange, TextAlign::RIGHT, "12kW");
          y_top += 187;
          it.print(x_left, y_top, id(font_sml), orange, TextAlign::RIGHT, "0kW");

          // Add x-axis label, i.e. graph duration
          // y_top -= 80;
          x_left = 5;
          it.print(x_left + 6, y_top, id(font_sml), orange, "1 hr");
          it.rectangle(x_left, y_top - 2, 56, 27, orange);

          // Display numeric values
          float solar = id(ha_solar_power).state;
          float house = id(ha_house_power).state;
          float grid = id(ha_grid_power).state;

          x_left = 7;
          y_top = 65;
          int y_inc = 25;

          // Display EMA filter factor and page number
          it.printf(x_left, y_top, id(font_sml), grey, TextAlign::LEFT, "Filt %.1f (p3)", ${ema_alpha});

          y_top += y_inc;
          it.printf(x_left, y_top, id(font_sml), yellow, TextAlign::LEFT, "Solar %.1f", solar);

          y_top += y_inc;
          it.printf(x_left, y_top, id(font_sml), cyan, TextAlign::LEFT, "House %.1f", house);

          y_top += y_inc;
          if (house > (solar + 0.05))
            it.printf(x_left, y_top, id(font_sml), red, TextAlign::LEFT, "Import %.1f", grid);
          else if (solar > (house + 0.05))
            it.printf(x_left, y_top, id(font_sml), green, TextAlign::LEFT, "Export %.1f", -grid);

graph:
  - id: power_graph
    duration: 1h
    width: 200 # leave a 5-pixel gap on either side of graph. Display width = 320 - 40 - (2 * 5)
    height: 200
    # x_grid: 10min     # time / div
    y_grid: 2.0       # 2 kW / div
    min_value: 0.0
    max_value: 12.0 # Maximum y-axis value
    traces:
      - sensor: ha_solar_power
        line_thickness: 1
        color: my_yellow
        continuous: true
      - sensor: ha_house_power
        line_thickness: 1
        color: my_cyan
        continuous: true

# interval:
#   - interval: 5s
#     then:
      # - display.page.show_next: lcd_display
      # - component.update: lcd_display
      # - lambda: |-
      #      ESP_LOGI("round()", "round 0.49=%.1f, 0.5=%.1f, 0.6=%.1f", round(0.49), round(0.5), round(0.6));

image:
  - file: "images/sun.png"
    id: img_sun
    resize: ${icon_size}X${icon_size}
    type: RGB
    dither: FLOYDSTEINBERG
  - file: "images/house.png"
    id: img_house
    resize: ${icon_size}X${icon_size}
    type: RGB
    dither: FLOYDSTEINBERG
  - file: "images/power3.png"
    id: img_powerlines
    resize: ${icon_size}X${icon_size}
    type: RGB
    dither: FLOYDSTEINBERG
