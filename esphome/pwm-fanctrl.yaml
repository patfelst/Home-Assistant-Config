# Four automatically controlled PWM fan outputs (J4-J7), each set by four target temperatures, maintained by four Dallas sensor's temperatures. MQTT enabled. Home Assistant API disabled. DHCP enabled.
# Other control configurations available with modification of Dallas platform LAMBDA function. Contact us at esp32andmore@gmail.com for no cost customization.
# From Tindie https://www.tindie.com/products/esp32/esp32-control-board-ver-21/
# Github instructions https://github.com/ESP32andmore/ECB/tree/main?tab=readme-ov-file
substitutions:
  devicename: "pwm-fanctrl"
  fdevicename: PWM Rack Fan Ctrl
  ip: 192.168.20.145 # For static IP adressing

  alarm_temp: "30" # Threshold for alarm when implemented
  ptemp: "20"
  itemp: "0.1"

  # Connect your Dallas sensors with logger: DEBUG enabled (factory flash default).
  # Open the ESPHome webtool, connect to the ECB board, view the "Logs" window, hit "Reset",
  # and search for Dallas scan addresses and replace the below addresses with your unique ones.
  dallasaddress1: "0x5f00000dfd4e7228"
  dallasaddress2: "0xf200000dfca2d528"

esphome:
  name: ${devicename}
  friendly_name: ${fdevicename}
  comment: Quad PWM fan controller from Tindie "ESP32andmore - ECB"

esp32:
  # board: wemos_d1_mini32
  board: esp32dev
  framework:
    type: arduino

preferences:
  flash_write_interval: 10min

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  - platform: esphome

api:
  encryption:
    key: "cO14KqVI948tsdDcbAaBFdsLZ3yT0CPRWOedsIXGzks="

logger:
  level: INFO

globals:
  - id: fan_sum
    type: float
    restore_value: no
    initial_value: "0"

number:
  - platform: template
    id: set_target_temp
    name: Target Temp
    optimistic: True
    min_value: 15
    max_value: 50
    initial_value: "26"
    step: 1
    restore_value: True
    unit_of_measurement: °C
    device_class: "TEMPERATURE"

  - platform: template
    id: above_ambient
    name: Temp Above Ambient
    optimistic: True
    min_value: 0
    max_value: 10
    initial_value: "2"
    step: 1
    restore_value: True
    unit_of_measurement: °C
    device_class: "TEMPERATURE"
    # on_value: 
    #   then:
    #     - number.set:
    #         # adjust the target temp when user changes "above ambient" in the front end
    #         id: set_target_temp
    #         value: !lambda |-
    #           return ((int)id(workshop_temperature).state + x);

  - platform: template
    id: set_alarm_temp
    name: Alarm Temp
    optimistic: True
    min_value: 15
    max_value: 80
    initial_value: ${alarm_temp}
    step: 1
    restore_value: true
    unit_of_measurement: °C
    device_class: "TEMPERATURE"
    on_value: 
      then:
        - lambda: |-
            ESP_LOGI("Alarm Temp", "Alarm temp set to %.1f", x);

switch:
  - platform: restart
    name: Restart

  - platform: gpio
    name: Relay 0
    pin: GPIO18
    id: relay_0
    restore_mode: restore_default_off

  - platform: template
    id: auto_fan
    name: Fan Auto Mode
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    turn_off_action:
      - fan.turn_off: fan1_speed
      - fan.turn_off: fan2_speed
      - fan.turn_off: fan3_speed
      - fan.turn_off: fan4_speed

  - platform: gpio
    id: oc_port
    name: OC Port
    restore_mode: ALWAYS_OFF
    pin:
      number: 26
      mode:
        output: true
        pullup: true

one_wire:
  - platform: gpio
    pin: GPIO27

output:
  - platform: ledc
    pin: GPIO13
    id: fan1
    frequency: 25600Hz

  - platform: ledc
    pin: GPIO14
    id: fan2
    frequency: 25600Hz

  - platform: ledc
    pin: GPIO25
    id: fan3
    frequency: 25600Hz

  - platform: ledc
    pin: GPIO32
    id: fan4
    frequency: 25600Hz

  - platform: ledc
    pin:
      number: GPIO2
      ignore_strapping_warning: True
    id: alarm_led

light:
  - platform: monochromatic
    id: alarm_light
    output: alarm_led
    name: Alarm Light
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%

i2c:
  # - id: bus_a
  #   sda: GPIO21
  #   scl: GPIO22
  #   scan: false
  - id: bus_b
    sda: GPIO16
    scl: GPIO17
    scan: False
    frequency: 800khz

sensor:
  - platform: homeassistant
    internal: true
    id: workshop_temperature
    entity_id: climate.ac_workshop
    attribute: "current_temperature"

  - platform: aht10
    i2c_id: bus_b
    address: 0x38
    variant: AHT20
    temperature:
      id: temp0
      name: Onboard Temperature
      filters:
        - filter_out: NaN
        - offset: -4.0
    humidity:
      name: Onboard Humidity
    update_interval: 5s

  - platform: pulse_counter
    pin: GPIO33
    unit_of_measurement: "rpm"
    name: Fan speed 1
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    pin: GPIO34
    unit_of_measurement: "rpm"
    name: Fan speed 2
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    pin: GPIO35
    unit_of_measurement: "rpm"
    name: Fan speed 3
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    pin: GPIO39
    unit_of_measurement: "rpm"
    name: Fan speed 4
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: wifi_signal
    name: WiFi
    update_interval: 30s

  - platform: uptime
    name: Uptime
    update_interval: 30s

  - platform: dallas_temp
    address: ${dallasaddress1}
    update_interval: 2s
    id: temp1
    filters:
      - filter_out: NaN
      - offset: 0.0
    unit_of_measurement: "°C"
    name: Temperature 1
    on_value:
      - if:
          condition:
            for:
              time: 10s
              condition:
                lambda: |-
                  return id(temp1).state >= id(set_alarm_temp).state;
          then:
            - light.turn_on:
                id: alarm_light
                effect: "Fast Pulse"
            - lambda: |-
                id(alarm_sen).publish_state(true);
          else:
            - light.turn_off:
                id: alarm_light
            - lambda: !lambda |-
                id(alarm_sen).publish_state(false);
      # example using GLOBAL to maintain persistant SUM for each fan
      - lambda: |-
          // ESP_LOGI("Temp 1", "Temperature-1: %.1f °C", x);
          // Patrick's mod for all 4 fans to act in parallel based on Fan 1 auto setting and temp sensor 1 temperature
          if (id(auto_fan).state) {
            float fan_actual_temp =  x; // x is from Dallas temperature sensor 1
            float fan_desired_temp = 0.0;
            // If user has set an "above ambient", then use that as the target temp, otherwise just use the target_temp
            if (id(above_ambient).state > 0) {
              fan_desired_temp = id(workshop_temperature).state + id(above_ambient).state;

              // Update the target temp to ambient + above ambient so user can see in front end
              auto call = id(set_target_temp).make_call();
              call.set_value(fan_desired_temp);
              call.perform();
            }
            else {
              fan_desired_temp = id(set_target_temp).state;
            }
            // ESP_LOGI("Desired", "Desired temp = %.1f °C", fan_desired_temp);

            float diff = fan_actual_temp - fan_desired_temp;
            id(fan_sum) =id(fan_sum) + diff;
            float fan_pdiff=diff * $ptemp;
            float fan_idiff= id(fan_sum) * $itemp;
            float fan_set_speed = fan_pdiff + fan_idiff;
            if (fan_set_speed >100) fan_set_speed =100;
            if (fan_set_speed <10) fan_set_speed=1;
            if (id(fan_sum) >100) id(fan_sum) = 100;
            if (id(fan_sum) < -100) id(fan_sum) = -100;
            if (fan_set_speed <10) {
              fan_set_speed=1;

              // Turn off fan 1
              auto calloff1 = id(fan1_speed).turn_off();
              calloff1.set_speed(fan_set_speed);
              calloff1.perform();

              // Turn off fan 2
              auto calloff2 = id(fan2_speed).turn_off();
              calloff2.set_speed(fan_set_speed);
              calloff2.perform();

              // Turn off fan 3
              auto calloff3 = id(fan3_speed).turn_off();
              calloff3.set_speed(fan_set_speed);
              calloff3.perform();

              // Turn off fan 4
              auto calloff4 = id(fan4_speed).turn_off();
              calloff4.set_speed(fan_set_speed);
              calloff4.perform();

            } else {
              // Set fan 1 speed
              auto call1 = id(fan1_speed).turn_on();
              call1.set_speed(fan_set_speed);
              call1.perform();

              // Set fan 2 speed
              auto call2 = id(fan2_speed).turn_on();
              call2.set_speed(fan_set_speed);
              call2.perform();

              // Set fan 3 speed
              auto call3 = id(fan3_speed).turn_on();
              call3.set_speed(fan_set_speed);
              call3.perform();

              // Set fan 4 speed
              auto call4 = id(fan4_speed).turn_on();
              call4.set_speed(fan_set_speed);
              call4.perform();

            }
          }

  - platform: dallas_temp
    address: ${dallasaddress2}
    update_interval: 2s
    id: temp2
    filters:
      - filter_out: NaN
      - offset: 0.0 #Calibration
    unit_of_measurement: "°C"
    name: Temperature 2
    # on_value:
    #   lambda: |-
    #     ESP_LOGW("Temp 2", "Temperature-2: %.1f °C", x);

fan:
  - platform: speed
    output: fan1
    id: fan1_speed
    name: Fan1 Speed
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: speed
    output: fan2
    id: fan2_speed
    name: Fan2 Speed
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: speed
    output: fan3
    id: fan3_speed
    name: Fan3 Speed
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: speed
    output: fan4
    id: fan4_speed
    name: Fan4 Speed
    restore_mode: RESTORE_DEFAULT_OFF

text_sensor:
  - platform: version
    name: Version

binary_sensor:
  - platform: template
    id: alarm_sen
    name: Alarm
    icon: mdi:fire
