substitutions:
  devicename: "tesla-battery-display"

esphome:
  name: ${devicename}
  friendly_name: Tesla Battery Display
  comment: Tesla battery display on M5Stack Atom Lite, HT16K33 14-seg display, strip of WS2812 RGB LEDs
  on_boot:
    priority: 600
    then:
      - light.turn_on:
          id: rgb_led_strip
          effect: 'Rainbow'
      - delay: 5000ms
      - light.turn_on:
          id: rgb_led_strip
          effect: 'None'
      - delay: 200ms
      - light.addressable_set:
          # clear all LEDs first
          id: rgb_led_strip
          range_from: 0
          range_to: 15
          red: 0%
          green: 0%
          blue: 0%
      - light.turn_off:
          id: rgb_led_strip

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:

api:
  encryption:
    key: bytsBI9deAPY8UwH5wevEaN1O+yTUKcGIHpZ+jfze8w=

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.20.212
    gateway: 192.168.20.1
    subnet: 255.255.255.0

button:
  - platform: restart
    name: ESP32 restart
  
number:
  - platform: template
    name: LED Brightness 4-digit Display
    id: brightness_4digit_display
    initial_value: 50
    optimistic: True
    min_value: 0
    max_value: 100
    step: 10
    mode: slider
  - platform: template
    name: LED Strip Brightness
    id: brightness_led_strip
    initial_value: 40
    optimistic: True
    min_value: 0
    max_value: 100
    step: 10
    mode: slider
  - platform: template
    name: Simulate Battery
    id: sim_batt
    initial_value: 40
    optimistic: True
    min_value: 0
    max_value: 100
    step: 1
    mode: slider
    
globals:
  - id: display_mode
    type: bool
    restore_value: yes
    initial_value: 'false'

sensor:
  - platform: homeassistant
    internal: true
    id: ha_tesla_battery
    entity_id: sensor.patrick_s_tesla_model_3_battery_level

# I2C pins for the HT16K33 I2C 4-digit LED display
i2c:
  sda: GPIO25
  scl: GPIO21

external_components:
  - source:
      type: git
      url: https://github.com/ssieb/custom_components
    components: [ ht16k33_alpha ]
    
display:
  # https://github.com/ssieb/custom_components/tree/master/components/ht16k33_alpha
  - platform: ht16k33_alpha
    address: 0x70
    # update_interval: 1s
    scroll: False
    # scroll_speed: 200ms # time between each movement
    # scroll_dwell: 5s   # time to wait at the end before going back to the start
    # scroll_delay: 4   # the number of scroll_speed cycles to wait at the beginning before starting to scroll
    id: led_display
    lambda: |-
      int battery = (int)id(ha_tesla_battery).state;
      // int battery = (int)id(sim_batt).state;
      it.printf("%d", battery);
      id(led_display).set_brightness(id(brightness_4digit_display).state / 100.0); // brightness of the lcd_ht16k33 LED display [0.1 - 1.0]

light:
  # - platform: neopixelbus
  - platform: esp32_rmt_led_strip
    id: rgb_led_strip
    name: RGB LED Strip
    internal: False
    rmt_channel: 0
    chipset: WS2812
    pin: 26
    num_leds: 16
    rgb_order: GRB
    default_transition_length: 100ms
    effects:
      - addressable_rainbow:
          name: Rainbow
          speed: 20
          width: 16
      - addressable_scan:
          name: Scan 3
          move_interval: 200ms

interval:
  - interval: 1s
    then:
      - light.addressable_set:
          # clear all LEDs first
          id: rgb_led_strip
          range_from: 0
          range_to: 15
          red: 0%
          green: 0%
          blue: 0%
      - if:
          condition:
            lambda: 'return round(id(ha_tesla_battery).state / 10.0) <= 4.0;'
            # lambda: 'return round(id(sim_batt).state / 10.0) < 4.0;'
          then:
            - light.addressable_set:
                id: rgb_led_strip
                color_brightness: !lambda 'return id(brightness_led_strip).state / 100.0;'
                range_from: 0
                range_to: !lambda |-
                  return (int)round(id(ha_tesla_battery).state / 10.0) - 1;
                  // return (int)round(id(sim_batt).state / 10.0) - 1;
                red: 100%
                green: 0%
                blue: 0%
          else:
            - if:
                condition:
                  lambda: 'return round(id(ha_tesla_battery).state / 10.0) <= 6.0;'
                  # lambda: 'return round(id(sim_batt).state / 10.0) < 6.0;'
                then:
                  - light.addressable_set:
                      id: rgb_led_strip
                      color_brightness: !lambda 'return id(brightness_led_strip).state / 100.0;'
                      range_from: 0
                      range_to: !lambda |-
                        return (int)round(id(ha_tesla_battery).state / 10.0) - 1;
                        // return (int)round(id(sim_batt).state / 10.0) - 1;
                      red: 100%
                      green: 100%
                      blue: 0%
                else:
                  - if:
                      condition:
                        lambda: 'return round(id(ha_tesla_battery).state / 10.0) <= 10.0;'
                        # lambda: 'return round(id(sim_batt).state / 10.) <= 10.0;'
                      then:
                        - light.addressable_set:
                            id: rgb_led_strip
                            color_brightness: !lambda 'return id(brightness_led_strip).state / 100.0;'
                            range_from: 0
                            range_to: !lambda |-
                              return (int)round(id(ha_tesla_battery).state / 10.0) - 1;
                              // return (int)round(id(sim_batt).state / 10.0) - 1;
                            red: 0%
                            green: 100%
                            blue: 0%
