esphome:
  name: test-t-display-s3-v2
  friendly_name: Test T-Display S3 v2

external_components:
  # - source: github://bradmck/lilygo-tdisplays3-esphome@Beta
  #   components: [tdisplays3]
  #   refresh: 0s
  - source: github://bradmck/lilygo-tdisplays3-esphome@OptionToExposeTFTObjects
    components: [tdisplays3]
    refresh: 0s
  # - source:
  #     type: local
  #     path: /config/esphome/
  #   components: [tdisplays3]

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "M+D0mdblzgj2k+fXnTUC2C35ETkdzTnUEgxu1gUEaNg="

ota:
  password: "eff5d8c0bbddd25af4ed4a3346c5ad38"


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "S3 Fallback Hotspot"
    password: "zQ9tuPKIfFMu"

time:
  - platform: homeassistant
    id: ha_time

output:
  - platform: ledc
    pin: GPIO38
    id: gpio38
    frequency: 2000

light:
  - platform: monochromatic
    output: gpio38
    name: "Backlight"
    restore_mode: RESTORE_DEFAULT_ON

# You can either setup the backlight as a switch like below or make it dimmable using a light output like above
# switch:
#   - platform: gpio
#     pin: GPIO38
#     name: "Backlight"
#     id: backlight
#     internal: true
#     restore_mode: RESTORE_DEFAULT_ON

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 30
  - file: "arial.ttf"
    id: arial_14
    size: 14
  - file: "arial.ttf"
    id: arial_20
    size: 20

display:
  - platform: tdisplays3
    id: disp
    update_interval: 1s
    rotation: 270
    expose_tft_objects: true
    lambda: |-
      // Clear the screen
      id(disp).spr.fillSprite(TFT_BLACK);
      // Original clock using traditinal ESPHome ESPHome Display functions
      it.printf(20, 140, id(roboto), Color(255, 0, 0), id(ha_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str());
      it.printf(5, 5, id(arial_20), Color(255, 255, 255), "Wifi RSSI");
      it.printf(15, 30, id(arial_20), Color(255, 255, 255), "%.0f dB", id(wifi_signal_db).state);
      it.printf(15, 60, id(arial_20), Color(255, 255, 255), "%.0f %%", id(wifi_signal_percent).state);

      int rssicolor;
      // Draw the gauge
      // int rssi=random(-100, -60);
      float rssi = id(wifi_signal_db).state;
      if (rssi < -100) {
        rssicolor=TFT_RED;
      }
      else if (rssi < -90) {
        rssicolor=TFT_ORANGE;
      }
      else if (rssi < -80) {
        rssicolor=TFT_YELLOW;
      }
      else {
        rssicolor=TFT_GREEN;
      }

      int gaugeangle = map(rssi, -150, -40, 30, 330);
      TFT_eSprite sprArc = TFT_eSprite(&id(disp).spr);
      sprArc.createSprite(140, 140);
      sprArc.fillSprite(TFT_PINK);
      sprArc.fillSmoothCircle(sprArc.width() / 2, sprArc.height() / 2, sprArc.width() / 2, TFT_BLACK, TFT_BLACK);
      sprArc.drawSmoothArc(sprArc.width() / 2, sprArc.width() / 2, sprArc.height() / 2, 50, 30, 330, TFT_DARKGREY, TFT_DARKGREY);
      sprArc.drawSmoothArc(sprArc.width() / 2, sprArc.width() / 2, sprArc.height() / 2, 50, 30, gaugeangle, rssicolor, TFT_LIGHTGREY);

      // Draw the gauge value label in the center - this sprite is the same size as the gauge itself to allow for easy text centering
      TFT_eSprite sprArcValue = TFT_eSprite(&id(disp).spr);
      sprArcValue.createSprite(140, 140);
      sprArcValue.setTextDatum(MC_DATUM);
      // Fill the text sprite with Pink, and use Pink for text background.  This will get filtered out late
      sprArcValue.fillSprite(TFT_PINK);
      sprArcValue.setTextColor(TFT_WHITE, TFT_PINK);
      sprArcValue.drawNumber(rssi, sprArc.height() / 2, sprArc.height() / 2, 6);

      // Push the gauge to the background sprite and filter out the Black background
      sprArc.pushToSprite(&id(disp).spr, (id(disp).spr.width() / 2) - (sprArc.width() / 2) , 5, TFT_PINK);  //, TFT_BLACK);
      // Push the label to the background sprite and filter out the Pink background
      sprArcValue.pushToSprite(&id(disp).spr, (id(disp).spr.width() / 2) - (sprArc.width() / 2) , 5, TFT_PINK);

      // id(disp).spr.pushSprite(0,0);

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    id: wifi_signal_percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"