esphome:
  name: "ttgo-scd41-livroom"
  name_add_mac_suffix: false
  comment: SCD-41 CO2 sensor on TTGO T-Display 240x135 TFT and Glowbit 8x WS2812B RGB LEDs
  project:
    name: "patrick.TTGO_SCD-41"
    version: "1.0"

esp32:
  board: ttgo-t1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

globals:
  - id: led_brightness
    type: int
    initial_value: '70' # percentage brightness
  - id: button_timer
    type: int
    initial_value: '0'
  - id: lcd_txt_colour
    type: Color
    initial_value: id(my_green)
  - id: co2_updated
    type: bool
    initial_value: 'false'
  - id: co2_calibrate
    type: bool
    initial_value: 'false'
  - id: co2_cal_val
    type: int
    initial_value: '425' # outside average April 2022 is 419
  - id: effect_counter
    type: int
    initial_value: '0'

font:
  - file: "arial.ttf"
    id: arial_20
    size: 20
  - file: "arial.ttf"
    id: arial_32
    size: 32
  - file: "arial.ttf"
    id: co2_font
    size: 85

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_orange
    # 255, 128, 0
    red: 100%
    green: 50%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

switch:
  - platform: gpio
    pin: GPIO4
    restore_mode: RESTORE_DEFAULT_ON # on boot, we want the LCD on
    name: "Backlight"
    id: backlight
    internal: true
  - platform: restart
    name: "Restart CO2 sensor"

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: st7789v
    model: TTGO TDisplay 135x240
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    update_interval: 1s
    rotation: 90
    lambda: |-
      static int cal_msg_timout = 0;

      // Indicate forced calibration will take place if button_1 is held
      if (id(button_1).state) {
        it.printf(it.get_width() / 2, it.get_height() / 2 - 20, id(arial_20), id(my_white), TextAlign::CENTER, "Hold button for 6s");
        it.printf(it.get_width() / 2, it.get_height() / 2, id(arial_20), id(my_white), TextAlign::CENTER, "to calibrate %d", id(button_timer));
      }
      // Indicate forced calibration has taken place
      else if (id(co2_calibrate)) {
        // Keep calibration message displayed for 3 seconds
        if (cal_msg_timout++ > 3) {
          id(co2_calibrate) = false;
          cal_msg_timout = 0;
        }
        it.printf(it.get_width() / 2, it.get_height() / 2, id(arial_20), id(my_white), TextAlign::CENTER, "Calibrating to %d ppm", id(co2_cal_val));
      }
      else {
        it.printf(it.get_width(), it.get_height(), id(arial_20), id(my_gray), TextAlign::BOTTOM_RIGHT, "CO2 PPM");
        it.printf(it.get_width() / 2, it.get_height() / 2, id(co2_font), id(lcd_txt_colour), TextAlign::CENTER, "%.0f", id(co2).state);
      }

      // Blink the update indicator circle
      if (id(co2_updated)) {
        id(co2_updated) = false;
        it.filled_circle(it.get_width() - 20, 90, 8, id(my_gray));
      }

i2c:
  - id: bus_a
    sda: 21
    scl: 22
    scan: true

text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

sensor:
  - platform: scd4x
    id: scd41
    i2c_id: bus_a
    temperature_offset: 12.5
    update_interval: 15s
    co2:
      name: "SCD41 CO2"
      id: co2
      on_value:
        then:
          - globals.set:
              id: co2_updated
              value: 'true'
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  below: 700
              then:
                - globals.set:
                    id: lcd_txt_colour
                    value: id(my_green)
                - light.turn_on:
                    id: led_strip
                    effect: 'None'
                    red: 0%
                    green: 100%
                    blue: 0%
                - lambda: |-
                    ESP_LOGI("SCD41-CO2", "led_strip == co2_good");
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  above: 700
                  below: 1000
              then:
                - globals.set:
                    id: lcd_txt_colour
                    value: id(my_yellow)
                - light.turn_on:
                    id: led_strip
                    effect: 'None'
                    red: 100%
                    green: 100%
                    blue: 0%
                - lambda: |-
                    ESP_LOGI("SCD41-CO2", "led_strip == co2_moderate");
          - if:
              condition:
                sensor.in_range:
                  id: co2
                  above: 1000
              then:
                - globals.set:
                    id: lcd_txt_colour
                    value: id(my_red)
                - light.turn_on:
                    id: led_strip
                    effect: 'None'
                    red: 100%
                    green: 0%
                    blue: 0%
                - lambda: |-
                    ESP_LOGI("SCD41-CO2", "led_strip == co2_bad");

    temperature:
      name: "SCD41 Temperature"
      accuracy_decimals: 1

  - platform: uptime
    name: Uptime Sensor
    internal: true
    id: uptime_sensor
    update_interval: 30s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")).c_str();

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 30s

light:
  - platform: fastled_clockless
    id: led_strip
    internal: False
    chipset: SK6812
    pin: GPIO12
    num_leds: 8
    rgb_order: GRB
    name: "LED Strip"
    restore_mode: ALWAYS_OFF
    default_transition_length: 200ms
    effects:
      - addressable_rainbow:
          name: Rainbow width 8
          speed: 10
          width: 8
      - addressable_rainbow:
          name: Rainbow width 16
          speed: 20
          width: 16
      - addressable_scan:
          name: Scan 40ms
          move_interval: 40ms
          scan_width: 1
      - strobe:
          name: Strobe Yellow
          colors:
            - state: true
              # brightness: 100%
              red: 100%
              green: 100%
              blue: 0%
              duration: 1.5s
            - state: false
              duration: 0.3s
      - strobe:
          name: Strobe Red
          colors:
            - state: true
              # brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              duration: 250ms
            - state: false
              duration: 150ms

interval:
  # - interval: 500ms
  #   then:
  #     - lambda: |-
  #         static int flash_counter = 0;
  #         int co2_tmp = id(co2).state;
  #         auto call_on = id(led_strip).turn_on();
  #         auto call_off = id(led_strip).turn_off();

  #         if (co2_tmp < 700) {
  #           call_on.set_rgb(0.0, 1.0, 0.0);
  #           call_on.perform();
  #         }

  #         else if (co2_tmp >= 700 && co2_tmp < 1000) {
  #           flash_counter++;
  #           ESP_LOGI("", "flash_counter=%d", flash_counter);
  #           if (flash_counter < 4) {
  #             call_on.set_rgb(1.0, 1.0, 0.0);
  #             call_on.perform();
  #           }
  #           else if (flash_counter < 6) {
  #             call_off.perform();
  #             flash_counter = 0;
  #           }
  #         }
  #         else if (co2_tmp >= 1000) {
  #           call_on.set_rgb(1.0, 0.0, 0.0);
  #           call_on.perform();
  #         }

  - interval: 1sec
    then:
      # count up when button_1 is held down
      - lambda: |-
          if (id(button_1).state)
            id(button_timer)++;
          else
            id(button_timer) = 0;
      - if:
          # Indicate button_1 being held down for entry to CO2 calibration mode
          condition:
            lambda: 'return (id(button_1).state) && (id(button_timer) < 6);'
          then:
            - light.addressable_set:
                # clear all LEDs first
                id: led_strip
                color_brightness: 0.0
                range_from: 0
                range_to: 7
                red: 0%
                green: 0%
                blue: 0%
            - light.addressable_set:
                # indicate button_1 is being held (purple)
                id: led_strip
                range_from: 0
                range_to: !lambda |-
                  return id(button_timer); // Each second increments another LED on the strip
                red: 60%
                green: 0%
                blue: 100%
          else:
            # Start CO2 calibration if button held for more than 6 seconds
            - if:
                condition:
                  lambda: 'return id(button_timer) >= 6;'
                then:
                  - globals.set:
                      id: co2_calibrate
                      value: 'true'
                  # Calibrate SCD-41 CO2 sensor
                  - scd4x.perform_forced_calibration:
                      value: !lambda 'return id(co2_cal_val);'
                      id: scd41
                  # Set all RGB LED segments to orange to indicate calibration
                  - light.addressable_set:
                      id: led_strip
                      range_from: 0
                      range_to: 7
                      red: 100%
                      green: 60%
                      blue: 0%
  
binary_sensor:
  - platform: gpio
    internal: true
    id: button_1
    pin:
      number: GPIO35
      inverted: true
      mode: input
    filters:
      - delayed_on: 50ms # debounce
    on_release: 
      then:
        - if:
            # Keep RGB LEDs orange during calibration
            condition:
              lambda: 'return !(id(co2_calibrate));'
            then:
              - light.addressable_set:
                  id: led_strip
                  color_brightness: 0.0
                  range_from: 0
                  range_to: 7
                  red: 0.0
                  green: 0.0
                  blue: 0.0

  - platform: gpio
    internal: true
    id: button_2
    pin:
      number: GPIO0
      inverted: true
      mode: input
    filters:
      - delayed_on: 50ms # debounce
    on_press:
      then:
        - lambda: |-
            id(effect_counter)++;
            // Wrap effect counter to zero when at last effect
            if (id(effect_counter) > id(led_strip).get_effects().size())
              id(effect_counter) = 0;
            id(led_strip).make_call().set_effect(id(effect_counter)).perform();
            //ESP_LOGW("debug text", "Effect = %d, number of effects: %d", id(effect_counter), id(led_strip).get_effects().size());
